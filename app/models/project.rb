class Project < ActiveRecord::Base
  belongs_to :user
  acts_as_taggable_on :skills
  acts_as_taggable_on :interests

  validate :at_least_2_skills
  validate :at_least_2_interests
  validates :name,
    presence: true,
    length: { minimum: 3, maximum: 40 },
    uniqueness: { scope: :user,
      message: "You already have a project by the same name" }

  validates :proposal,
    presence: true,
    length: { minimum: 50 },
    uniqueness: { scope: :user,
      message: "You already have a project with the same proposal" }

  def at_least_2_skills
    # if we return false in a callback the record will not be saved
    if skill_list.count >= 2
      true
    else
      errors.messages[:skill_error] = ["not enough skills"] # change error message appropriately
      false
    end
  end

  def at_least_2_interests
    # if we return false in a callback the record will not be saved
    if interest_list.count >= 2
      true
    else
      errors.messages[:interest_error] = ["not enough interests"] # change error message appropriately
      false
    end
  end

  def users_matches(user)
    matches = Array.new
    (user.skill_list & self.skill_list).each do |match|
      matches << { "skill" => match }
    end
    (user.interest_list & self.interest_list).each do |match|
      matches << { "interest" => match }
    end
    matches
  end

  def users_matching_skills(user)
    user.skill_list & self.skill_list
  end

  def users_matching_interests(user)
    user.interest_list & self.interest_list
  end

  def recommended_users
    ideal_user = User.create(
      username: "ideal user",
      about_me: "This is an ideal user generated by the project's skills and
      interests and temporarily used for the purpose of finding releated
      users",
      first_name: "ideal",
      last_name: "user",
      zip_code: "02445",
      skill_list: skill_list.join(", "),
      interest_list: interest_list.join(", "),
      email: "ideal_user@email.com",
      password: "password",
      password_confirmation: "password"
    )
    ideal_skills = ideal_user.skill_list
    ideal_interests = ideal_user.interest_list
    recommended_users_by_interests = ideal_user.find_related_interests
    recommended_users_by_skills = ideal_user.find_related_skills
    recommended_users = recommended_users_by_skills +
      recommended_users_by_interests
    recommended_users.uniq!
    scored_users = Hash.new
    User.destroy(ideal_user.id)

    recommended_users.each do |user|
      unless user.id == self.user.id
        # i don't want to be recommended for my own project
        skill_intersection = ideal_skills & user.skill_list
        interest_intersection = ideal_interests & user.interest_list
        if skill_intersection.any? && interest_intersection.any?
          score = 5
          # if they have a match on both skills and interests that should
          # have a higher recommendation value
          score = score + skill_intersection.count + interest_intersection.count
          scored_users[user] = score
        elsif skill_intersection.any?
          score = skill_intersection.count
          scored_users[user] = score
        else
          score = interest_intersection.count
          scored_users[user] = score
        end
      end
    end
    scored_users = scored_users.sort_by { |_user, score| score }.reverse
    top_5_recommended_users = scored_users[0..4]
    top_5_recommended_users.to_h.keys
  end
end
